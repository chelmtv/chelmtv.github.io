{
  "version": 3,
  "sources": ["../../core-js/internals/is-big-int-array.js", "../../core-js/internals/to-big-int.js", "../../core-js/modules/es.typed-array.with.js"],
  "sourcesContent": ["var classof = require('../internals/classof');\n\nmodule.exports = function (it) {\n  var klass = classof(it);\n  return klass == 'BigInt64Array' || klass == 'BigUint64Array';\n};\n", "var toPrimitive = require('../internals/to-primitive');\n\nvar $TypeError = TypeError;\n\n// `ToBigInt` abstract operation\n// https://tc39.es/ecma262/#sec-tobigint\nmodule.exports = function (argument) {\n  var prim = toPrimitive(argument, 'number');\n  if (typeof prim == 'number') throw $TypeError(\"Can't convert number to bigint\");\n  // eslint-disable-next-line es/no-bigint -- safe\n  return BigInt(prim);\n};\n", "'use strict';\nvar arrayWith = require('../internals/array-with');\nvar ArrayBufferViewCore = require('../internals/array-buffer-view-core');\nvar isBigIntArray = require('../internals/is-big-int-array');\nvar toIntegerOrInfinity = require('../internals/to-integer-or-infinity');\nvar toBigInt = require('../internals/to-big-int');\n\nvar aTypedArray = ArrayBufferViewCore.aTypedArray;\nvar getTypedArrayConstructor = ArrayBufferViewCore.getTypedArrayConstructor;\nvar exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;\n\nvar PROPER_ORDER = !!function () {\n  try {\n    // eslint-disable-next-line no-throw-literal, es/no-typed-arrays, es/no-array-prototype-with -- required for testing\n    new Int8Array(1)['with'](2, { valueOf: function () { throw 8; } });\n  } catch (error) {\n    // some early implementations, like WebKit, does not follow the final semantic\n    // https://github.com/tc39/proposal-change-array-by-copy/pull/86\n    return error === 8;\n  }\n}();\n\n// `%TypedArray%.prototype.with` method\n// https://tc39.es/proposal-change-array-by-copy/#sec-%typedarray%.prototype.with\nexportTypedArrayMethod('with', { 'with': function (index, value) {\n  var O = aTypedArray(this);\n  var relativeIndex = toIntegerOrInfinity(index);\n  var actualValue = isBigIntArray(O) ? toBigInt(value) : +value;\n  return arrayWith(O, getTypedArrayConstructor(O), relativeIndex, actualValue);\n} }['with'], !PROPER_ORDER);\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA,QAAI,UAAU;AAEd,WAAO,UAAU,SAAU,IAAI;AAC7B,UAAI,QAAQ,QAAQ,EAAE;AACtB,aAAO,SAAS,mBAAmB,SAAS;AAAA,IAC9C;AAAA;AAAA;;;ACLA;AAAA;AAAA,QAAI,cAAc;AAElB,QAAI,aAAa;AAIjB,WAAO,UAAU,SAAU,UAAU;AACnC,UAAI,OAAO,YAAY,UAAU,QAAQ;AACzC,UAAI,OAAO,QAAQ;AAAU,cAAM,WAAW,gCAAgC;AAE9E,aAAO,OAAO,IAAI;AAAA,IACpB;AAAA;AAAA;;;ACXA;AAAA;AACA,QAAI,YAAY;AAChB,QAAI,sBAAsB;AAC1B,QAAI,gBAAgB;AACpB,QAAI,sBAAsB;AAC1B,QAAI,WAAW;AAEf,QAAI,cAAc,oBAAoB;AACtC,QAAI,2BAA2B,oBAAoB;AACnD,QAAI,yBAAyB,oBAAoB;AAEjD,QAAI,eAAe,CAAC,CAAC,WAAY;AAC/B,UAAI;AAEF,YAAI,UAAU,CAAC,EAAE,MAAM,EAAE,GAAG,EAAE,SAAS,WAAY;AAAE,gBAAM;AAAA,QAAG,EAAE,CAAC;AAAA,MACnE,SAAS,OAAP;AAGA,eAAO,UAAU;AAAA,MACnB;AAAA,IACF,EAAE;AAIF,2BAAuB,QAAQ,EAAE,QAAQ,SAAU,OAAO,OAAO;AAC/D,UAAI,IAAI,YAAY,IAAI;AACxB,UAAI,gBAAgB,oBAAoB,KAAK;AAC7C,UAAI,cAAc,cAAc,CAAC,IAAI,SAAS,KAAK,IAAI,CAAC;AACxD,aAAO,UAAU,GAAG,yBAAyB,CAAC,GAAG,eAAe,WAAW;AAAA,IAC7E,EAAE,EAAE,MAAM,GAAG,CAAC,YAAY;AAAA;AAAA;",
  "names": []
}
