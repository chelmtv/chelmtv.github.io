import {
  require_array_with
} from "./chunk-L56BMMKI.js";
import {
  require_array_buffer_view_core
} from "./chunk-GVOSTOJO.js";
import {
  require_classof
} from "./chunk-3C36ZEHD.js";
import {
  require_to_integer_or_infinity
} from "./chunk-RCSXG2HZ.js";
import {
  require_to_primitive
} from "./chunk-U3I62X7R.js";
import {
  __commonJS
} from "./chunk-WQG2LZMB.js";

// node_modules/core-js/internals/is-big-int-array.js
var require_is_big_int_array = __commonJS({
  "node_modules/core-js/internals/is-big-int-array.js"(exports, module) {
    var classof = require_classof();
    module.exports = function(it) {
      var klass = classof(it);
      return klass == "BigInt64Array" || klass == "BigUint64Array";
    };
  }
});

// node_modules/core-js/internals/to-big-int.js
var require_to_big_int = __commonJS({
  "node_modules/core-js/internals/to-big-int.js"(exports, module) {
    var toPrimitive = require_to_primitive();
    var $TypeError = TypeError;
    module.exports = function(argument) {
      var prim = toPrimitive(argument, "number");
      if (typeof prim == "number")
        throw $TypeError("Can't convert number to bigint");
      return BigInt(prim);
    };
  }
});

// node_modules/core-js/modules/es.typed-array.with.js
var require_es_typed_array_with = __commonJS({
  "node_modules/core-js/modules/es.typed-array.with.js"() {
    var arrayWith = require_array_with();
    var ArrayBufferViewCore = require_array_buffer_view_core();
    var isBigIntArray = require_is_big_int_array();
    var toIntegerOrInfinity = require_to_integer_or_infinity();
    var toBigInt = require_to_big_int();
    var aTypedArray = ArrayBufferViewCore.aTypedArray;
    var getTypedArrayConstructor = ArrayBufferViewCore.getTypedArrayConstructor;
    var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;
    var PROPER_ORDER = !!function() {
      try {
        new Int8Array(1)["with"](2, { valueOf: function() {
          throw 8;
        } });
      } catch (error) {
        return error === 8;
      }
    }();
    exportTypedArrayMethod("with", { "with": function(index, value) {
      var O = aTypedArray(this);
      var relativeIndex = toIntegerOrInfinity(index);
      var actualValue = isBigIntArray(O) ? toBigInt(value) : +value;
      return arrayWith(O, getTypedArrayConstructor(O), relativeIndex, actualValue);
    } }["with"], !PROPER_ORDER);
  }
});

export {
  require_is_big_int_array,
  require_to_big_int,
  require_es_typed_array_with
};
//# sourceMappingURL=chunk-TWB7K53F.js.map
