import {
  require_does_not_exceed_safe_integer
} from "./chunk-XZUONP6O.js";
import {
  require_add_to_unscopables
} from "./chunk-TYSKS5M3.js";
import {
  require_export,
  require_to_absolute_index,
  require_to_indexed_object
} from "./chunk-G6PODNB4.js";
import {
  require_length_of_array_like,
  require_to_integer_or_infinity
} from "./chunk-RCSXG2HZ.js";
import {
  __commonJS
} from "./chunk-WQG2LZMB.js";

// node_modules/core-js/modules/es.array.to-spliced.js
var require_es_array_to_spliced = __commonJS({
  "node_modules/core-js/modules/es.array.to-spliced.js"() {
    var $ = require_export();
    var addToUnscopables = require_add_to_unscopables();
    var doesNotExceedSafeInteger = require_does_not_exceed_safe_integer();
    var lengthOfArrayLike = require_length_of_array_like();
    var toAbsoluteIndex = require_to_absolute_index();
    var toIndexedObject = require_to_indexed_object();
    var toIntegerOrInfinity = require_to_integer_or_infinity();
    var $Array = Array;
    var max = Math.max;
    var min = Math.min;
    $({ target: "Array", proto: true }, {
      toSpliced: function toSpliced(start, deleteCount) {
        var O = toIndexedObject(this);
        var len = lengthOfArrayLike(O);
        var actualStart = toAbsoluteIndex(start, len);
        var argumentsLength = arguments.length;
        var k = 0;
        var insertCount, actualDeleteCount, newLen, A;
        if (argumentsLength === 0) {
          insertCount = actualDeleteCount = 0;
        } else if (argumentsLength === 1) {
          insertCount = 0;
          actualDeleteCount = len - actualStart;
        } else {
          insertCount = argumentsLength - 2;
          actualDeleteCount = min(max(toIntegerOrInfinity(deleteCount), 0), len - actualStart);
        }
        newLen = doesNotExceedSafeInteger(len + insertCount - actualDeleteCount);
        A = $Array(newLen);
        for (; k < actualStart; k++)
          A[k] = O[k];
        for (; k < actualStart + insertCount; k++)
          A[k] = arguments[k - actualStart + 2];
        for (; k < newLen; k++)
          A[k] = O[k + actualDeleteCount - insertCount];
        return A;
      }
    });
    addToUnscopables("toSpliced");
  }
});

export {
  require_es_array_to_spliced
};
//# sourceMappingURL=chunk-EQMU5RWW.js.map
